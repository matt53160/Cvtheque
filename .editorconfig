# Fichier de configuration du style de code Orkeis
# Version 1
# Date : 2019-10-01
# Auteur : Xavier Roger-Machart

# Ne pas prendre en compte d'autres .editorconfig dans des dossiers parents
root = true

#########################################
# Pour tous les types de fichiers
#########################################
[*.js,*.cs]

# On veut de l'UTF-8
charset = utf-8

# Sauts de ligne à la Windows (\n\r)
end_of_line = crlf

#########################################
# Pour les fichiers C#...
#########################################
[*.cs]

# Espaces et indentation
indent_size = 4
indent_style = space
tab_width = 4

# Saut de ligne de fin de ficher non obligatoire
insert_final_newline = false

#### Conventions .NET ####

# Organisation des usings avec les System en premier
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = true

# Eviter "this." à moins de nécessité absolue
dotnet_style_qualification_for_event = false:suggestion
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_property = false:suggestion

# Utiliser les mots-clés plutôt que les noms de types pour les types natifs
# Par exemple, "int" au lieu de "Int32"
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Gestion des parenthèses
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning

# Les modifieurs (private, public, etc...) doivent toujours être spécifiés
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion

# Définit quand on préfère utiliser des expressions abrégées
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_throw_expression = false:silent
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_null_propagation = true:suggestion
dotnet_style_object_initializer = true:silent
dotnet_style_prefer_auto_properties = true:suggestion
dotnet_style_prefer_compound_assignment = false:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = false:silent
dotnet_style_prefer_conditional_expression_over_return = false:silent
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion

# Utiliser les champs "readonly" lorsque c'est possible
dotnet_style_readonly_field = true:suggestion

# Eviter de garder des paramètres non utilisés
dotnet_code_quality_unused_parameters = all:suggestion

#### Conventions C# ####

# Pour l'utilisation de "var", on désactive tous les messages : les options du .editorconfig
# ne sont pas assez fines pour être vraiment utiles...
# Bonnes pratiques sur l'utilisation du "var": https://docs.microsoft.com/fr-fr/dotnet/csharp/programming-guide/inside-a-program/coding-conventions#implicitly-typed-local-variables
csharp_style_var_elsewhere = false:silent
csharp_style_var_for_built_in_types = false:silent
csharp_style_var_when_type_is_apparent = false:silent

# Règles d'utilisation de la syntaxe => en remplacement de {}
csharp_style_expression_bodied_accessors = true:suggestion
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_lambdas = true:silent
csharp_style_expression_bodied_local_functions = false:suggestion
csharp_style_expression_bodied_methods = false:suggestion
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:suggestion

# Utiliser le pattern matching lorsque c'est possible
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_prefer_switch_expression = true:warning

# Appeler les instances de délégués avec "?." pour vérifier qu'ils ne soient pas null
csharp_style_conditional_delegate_call = true:suggestion

# Préférer les fonctions locales statiques
csharp_prefer_static_local_function = true:suggestion

# Ordre favori pour les mots-clés d'une déclaration
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async

# Utiliser les {}, même pour les blocs qui ne contiennent qu'une seule ligne
csharp_prefer_braces = true:suggestion

# Eviter les blocs using simplifiés
csharp_prefer_simple_using_statement = false:suggestion

# Options diverses
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:warning
csharp_style_prefer_index_operator = true:warning
csharp_style_prefer_range_operator = true:warning
csharp_style_unused_value_assignment_preference = discard_variable:suggestion
csharp_style_unused_value_expression_statement_preference = discard_variable:silent

# On veut les imports d'espaces de noms à l'extérieur du bloc namespace
csharp_using_directive_placement = outside_namespace:silent

#### Régles de formattage ####

# Sauts de ligne partout
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Règles d'indentation
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Positionnement des espaces
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# On ne veut jamais garder deux instructions sur la même ligne...
csharp_preserve_single_line_blocks = true
# ...sauf quand ils sont groupés dans un même bloc (pratique pour "{ get; set; }")
csharp_preserve_single_line_statements = false

#### Régles de nommage ####

# Les interfaces commencent par un I, et sont écrits en casse pascal
dotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

# Les types sont écrits en casse pascal
dotnet_naming_rule.types_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

# Les espaces de noms sont écrits en casse pascal
dotnet_naming_rule.namespaces_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.namespaces_should_be_pascal_case.symbols = namespaces
dotnet_naming_rule.namespaces_should_be_pascal_case.style = pascal_case

# Les champs privés commencent par un _, et sont écrits en casse camel
dotnet_naming_rule.private_or_internal_field_should_be_begins_with_underscore.severity = suggestion
dotnet_naming_rule.private_or_internal_field_should_be_begins_with_underscore.symbols = private_or_internal_field
dotnet_naming_rule.private_or_internal_field_should_be_begins_with_underscore.style = begins_with_underscore

# Les constantes sont écrites tout en majuscules, avec chaque mot séparés par des _
dotnet_naming_rule.constants_should_be_all_caps.severity = suggestion
dotnet_naming_rule.constants_should_be_all_caps.symbols = constants
dotnet_naming_rule.constants_should_be_all_caps.style = all_caps

# Les membres qui ne sont pas des champs doivent être écrits en casse pascal
dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# Les méthodes et fonctions asynchrone soivent se terminer par Async
# Note : il existe quelques exceptions (par exemple les actions de contrôleurs ASPNET). Pourrait-on les définir dans ce fichier ?
dotnet_naming_rule.async_methods_should_be_ends_with_async.severity = suggestion
dotnet_naming_rule.async_methods_should_be_ends_with_async.symbols = async_methods
dotnet_naming_rule.async_methods_should_be_ends_with_async.style = ends_with_async

# Spécifications de symboles

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.private_or_internal_field.applicable_kinds = field
dotnet_naming_symbols.private_or_internal_field.applicable_accessibilities = internal, private
dotnet_naming_symbols.private_or_internal_field.required_modifiers = 

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.types.required_modifiers = 

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.non_field_members.required_modifiers = 

dotnet_naming_symbols.constants.applicable_kinds = field
dotnet_naming_symbols.constants.applicable_accessibilities = *
dotnet_naming_symbols.constants.required_modifiers = const

dotnet_naming_symbols.namespaces.applicable_kinds = namespace
dotnet_naming_symbols.namespaces.applicable_accessibilities = 
dotnet_naming_symbols.namespaces.required_modifiers = 

dotnet_naming_symbols.async_methods.applicable_kinds = method, local_function
dotnet_naming_symbols.async_methods.applicable_accessibilities = *
dotnet_naming_symbols.async_methods.required_modifiers = async

# Définitions de styles

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix = 
dotnet_naming_style.begins_with_i.word_separator = 
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.begins_with_underscore.required_prefix = _
dotnet_naming_style.begins_with_underscore.required_suffix = 
dotnet_naming_style.begins_with_underscore.word_separator = 
dotnet_naming_style.begins_with_underscore.capitalization = camel_case

dotnet_naming_style.all_caps.required_prefix = 
dotnet_naming_style.all_caps.required_suffix = 
dotnet_naming_style.all_caps.word_separator = _
dotnet_naming_style.all_caps.capitalization = all_upper

dotnet_naming_style.ends_with_async.required_prefix = 
dotnet_naming_style.ends_with_async.required_suffix = Async
dotnet_naming_style.ends_with_async.word_separator = 
dotnet_naming_style.ends_with_async.capitalization = pascal_case

#########################################
# Pour les contrôleurs C#...
#########################################
[*Controller.cs]

# Inutile de mettre "Async" à la fin des méthodes (qui sont donc des actions MVC)
# - Elles ne sont jamais appelées par du code C# (donc moins de risque de se faire appeler sans await)
# - On ne veut pas de "Async" qui polluent les URL
dotnet_naming_rule.async_methods_should_be_ends_with_async.severity = suggestion
dotnet_naming_rule.async_methods_should_be_ends_with_async.symbols = async_methods
dotnet_naming_rule.async_methods_should_be_ends_with_async.style = pascal_case

[*.{cs,vb}]
dotnet_diagnostic.CA1303.severity=silent
dotnet_diagnostic.CA2007.severity=silent